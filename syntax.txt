int VarName; //Объявление переменной
float x = 0.1; //Объявление и инициализация переменной
------------------------------------------------------
int[] Array1D = new int[10]; //объявление одномерного массива
Array1D[0] = 3; //обращение к элементу массива

float[][] Array2D = new float[10][]; //объявление двумерного массива
for (int i = 0; i < 10; i++) 
{
   Array2D[i] = new float[4];
}
_______________________________________________________

=	присвоение
+-*/ 	математические операции
== 	равно
!=	не равно
>,<,>=,<=
&& 	логическое и
||	логическое или
!	логическое отрицание
x+=y	x=x+y
x++	x=x+1
_______________________________________________________

int IntVar = 5;
int* PointToIntVar; //указатель на переменную типа char
PointToIntVar = &IntVar; //присвоение указателю адреса переменной IntVar
Console.WriteLine(*PointToIntVar); //вывод значения переменной, на которую ссылается указатель
_______________________________________________________
//Нелинейности алгоритма: условный оператор, циклы

bool condition = true;
if (condition)
{
	Console.WriteLine("Condition is fulfilled");
}
else
{
	Console.WriteLine("Condition is not fulfilled");
}
------------------------------------------------------
for(int i = 0; i < 10; i++)
{
	Console.WriteLine("i = ",i);
}
------------------------------------------------------
int i = 1;
while (i < 10) 
{
	Console.WriteLine("i = ", i);
	i++;
}
______________________________________________________

//multiple in, single out
Func<inType1,inType2...inTypeN,outType> FuncName = (Var1,...,varN) => {
	return OutVarName; //результат, возвращаемый функцией, тип outType
};
outType Var = Func(Var1,Var2...);

------------------------------------------------------

//No in/out parameters
Action HiWorld = () => {
	Console.WriteLine ("Hello World!");
};

------------------------------------------------------

class ClassName
{
	//Объявление переменных класса
	//Private элементы класса доступны только внутри класса
	private double InputVariable;
	
	//Методы класса
	//К public элементам можно обратиться из других частей программы
	public void InputMethod()
	{
		Console.WriteLine("Enter value: ");
		InputVariable = Console.ReadLine());
	}
	/*protected элементы класса - доступны другим элементам класса 
	и наследникам класса?(воспоминания расплывчаты)*/
}
void main(string[] args)
{
	ClassName ClassInstance = new ClassName(); //создание представителя класса
	ClassInstance.InputMethod(); //обращение к public методу класса
}

_______________________________________________________


using System; 
//Что-то необходимое для использования следующих конструкций
...
Console.WriteLine


("Text1","Text2"); //Вывод на экран
Console.ReadLine(); //Ввод значения пользователем

_______________________________________________________

throw new Exception("min не может быть больше max");

checked() генерирует исключение OverflowException в случае переполнения, при вычислениях внутри неё
